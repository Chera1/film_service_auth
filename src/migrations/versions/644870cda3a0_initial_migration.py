"""Initial migration

Revision ID: 644870cda3a0
Revises: 
Create Date: 2022-11-19 08:46:53.872562

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from src.models.authentication import PARTITION_TABLES_REGISTRY, create_table_login_history_partition_ddl


# revision identifiers, used by Alembic.
revision = '644870cda3a0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('role_name_index', 'role', ['name'], unique=False)
    op.create_table('users',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('login', sa.String(), nullable=False),
    sa.Column('password', sa.LargeBinary(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.Column('is_administrator', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('login')
    )
    op.create_index('users_login_index', 'users', ['login'], unique=False)
    op.create_table('authentication',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('login_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'login_at'),
    sa.UniqueConstraint('login_at', 'id'),
    postgresql_partition_by='RANGE (login_at)'
    )
    op.create_table('social_account',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('social_id', sa.Text(), nullable=False),
    sa.Column('social_name', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('social_id', 'social_name', name='social_pk')
    )
    op.create_table('user_role',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('authentication2020',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('login_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'login_at')
    )
    op.create_table('authentication2021',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('login_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'login_at')
    )
    op.create_table('authentication2022',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('login_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'login_at')
    )
    op.create_table('authentication2023',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('login_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'login_at')
    )
    op.create_table('authentication2024',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('login_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'login_at')
    )
    # ### end Alembic commands ###

    for table_class, device_type in PARTITION_TABLES_REGISTRY:
        ddl = create_table_login_history_partition_ddl(table_class.__table__, device_type)
        ddl(target=None, bind=op.get_bind())


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('authentication2024')
    op.drop_table('authentication2023')
    op.drop_table('authentication2022')
    op.drop_table('authentication2021')
    op.drop_table('authentication2020')
    op.drop_table('user_role')
    op.drop_table('social_account')
    op.drop_table('authentication')
    op.drop_index('users_login_index', table_name='users')
    op.drop_table('users')
    op.drop_index('role_name_index', table_name='role')
    op.drop_table('role')
    # ### end Alembic commands ###
